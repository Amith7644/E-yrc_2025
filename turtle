#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
from geometry_msgs.msg import Twist
from turtlesim.srv import TeleportAbsolute, SetPen
import math
import time


class DroneDrawer(Node):
    def __init__(self):
        super().__init__('drone_drawer')
        self.pub = self.create_publisher(Twist, '/turtle1/cmd_vel', 10)

        # Service clients
        self.cli_tp = self.create_client(TeleportAbsolute, '/turtle1/teleport_absolute')
        self.cli_pen = self.create_client(SetPen, '/turtle1/set_pen')

        while not self.cli_tp.wait_for_service(timeout_sec=1.0):
            self.get_logger().info('waiting for teleport service...')
        while not self.cli_pen.wait_for_service(timeout_sec=1.0):
            self.get_logger().info('waiting for set_pen service...')

        time.sleep(1)

    def teleport(self, x, y, theta=0.0):
        req = TeleportAbsolute.Request()
        req.x, req.y, req.theta = float(x), float(y), float(theta)
        self.cli_tp.call_async(req)
        time.sleep(0.2)

    def set_pen(self, r=255, g=255, b=255, width=2, off=0):
        req = SetPen.Request()
        req.r, req.g, req.b = r, g, b
        req.width = width
        req.off = off
        self.cli_pen.call_async(req)
        time.sleep(0.1)

    def draw_circle(self, radius=1.0):
        vel = Twist()
        vel.linear.x = 1.0
        vel.angular.z = 1.0 / radius
        t0 = time.time()
        duration = 2 * math.pi * radius / vel.linear.x
        while time.time() - t0 < duration:
            self.pub.publish(vel)
            time.sleep(0.05)
        self.pub.publish(Twist())

    def execute(self):
        # Step 1: Draw four propellers (4 circles)
        centers = [(2.0, 2.0), (2.0, 8.0), (8.0, 8.0), (8.0, 2.0)]
        for (cx, cy) in centers:
            self.set_pen(off=1)
            self.teleport(cx + 1.0, cy, 0.0)
            self.set_pen(off=0)
            self.draw_circle(radius=1.0)

        # Step 2: Draw central diamond
        frame_pts = [(3.0, 5.0), (5.0, 7.0), (7.0, 5.0), (5.0, 3.0), (3.0, 5.0)]
        self.set_pen(off=1)
        self.teleport(*frame_pts[0])
        self.set_pen(off=0)
        for (x, y) in frame_pts[1:]:
            self.teleport(x, y)

        # Step 3: Connect frame to propellers
        connections = [
            ((3.0, 5.0), (2.0, 2.0)),
            ((5.0, 7.0), (2.0, 8.0)),
            ((7.0, 5.0), (8.0, 8.0)),
            ((5.0, 3.0), (8.0, 2.0))
        ]
        for (start, end) in connections:
            self.set_pen(off=1)
            self.teleport(*start)
            self.set_pen(off=0)
            self.teleport(*end)

        # Step 4: Return turtle to center
        self.set_pen(off=1)
        self.teleport(5.0, 5.0, 0.0)


def main(args=None):
    rclpy.init(args=args)
    node = DroneDrawer()
    node.execute()
    node.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()
