#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
from turtlesim.srv import TeleportAbsolute
import math
import time

TEAM_ID = "2256"

class DroneDrawer(Node):
    def __init__(self):
        super().__init__('task_1b_' + TEAM_ID)
        self.cli = self.create_client(TeleportAbsolute, '/turtle1/teleport_absolute')
        while not self.cli.wait_for_service(timeout_sec=1.0):
            self.get_logger().info('Waiting for /turtle1/teleport_absolute service...')

    def teleport(self, x, y, theta=0.0):
        req = TeleportAbsolute.Request()
        req.x = float(x)
        req.y = float(y)
        req.theta = float(theta)
        self.cli.call_async(req)
        time.sleep(0.1)

    def draw_circle(self, cx, cy, r=1.0, steps=36):
        for i in range(steps+1):
            angle = 2 * math.pi * i / steps
            x = cx + r * math.cos(angle)
            y = cy + r * math.sin(angle)
            self.teleport(x, y)

    def draw_line_to_circle(self, x1, y1, cx, cy, r):
        # vector from circle center → diamond vertex
        dx = x1 - cx
        dy = y1 - cy
        dist = math.sqrt(dx*dx + dy*dy)
        # scale to radius
        x_end = cx + dx * r / dist
        y_end = cy + dy * r / dist
        # draw line from diamond vertex → circle edge
        steps = int(dist*10)
        for i in range(steps+1):
            t = i / steps
            x = x1 + t * (x_end - x1)
            y = y1 + t * (y_end - y1)
            self.teleport(x, y)

    def draw_drone(self):
        # Circle centers and radius
        r = 1.0
        circles = [(2,2), (2,8), (8,8), (8,2)]
        for (cx, cy) in circles:
            self.draw_circle(cx, cy, r)

        # Diamond vertices
        diamond = [(3,5), (5,7), (7,5), (5,3)]
        for (x,y) in diamond:
            self.teleport(x,y)

        # Connect diamond to circles properly
        connections = [
            ((3,5),(2,2)),  # left → bottom-left
            ((3,5),(2,8)),  # left → top-left
            ((7,5),(8,2)),  # right → bottom-right
            ((7,5),(8,8)),  # right → top-right
            ((5,7),(2,8)),  # top → top-left
            ((5,7),(8,8)),  # top → top-right
            ((5,3),(2,2)),  # bottom → bottom-left
            ((5,3),(8,2)),  # bottom → bottom-right
        ]
        for (vx,vy),(cx,cy) in connections:
            self.draw_line_to_circle(vx, vy, cx, cy, r)

        # Return to center
        self.teleport(5,5)

def main(args=None):
    rclpy.init(args=args)
    node = DroneDrawer()
    node.draw_drone()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
