import turtle
import math

# Setup screen
screen = turtle.Screen()
screen.title("Drone Drawing")
screen.setup(width=600, height=600)

# Create turtle
t = turtle.Turtle()
t.speed(0)
t.pensize(2)
t.color("black")

# Function to move turtle without drawing
def move_to(x, y):
    t.penup()
    t.goto(x, y)
    t.pendown()

# Function to draw circle at (x, y) with radius r
def draw_circle(cx, cy, r):
    move_to(cx, cy - r)  # move to bottom of circle
    t.pendown()
    t.circle(r)

# Function to draw line between two points
def draw_line(x1, y1, x2, y2):
    move_to(x1, y1)
    t.pendown()
    t.goto(x2, y2)

# Function to connect diamond corner to circle boundary
def connect_to_circle(x1, y1, xc, yc, r):
    dx, dy = xc - x1, yc - y1
    dist = math.sqrt(dx*dx + dy*dy)
    x2 = x1 + dx * (dist - r) / dist
    y2 = y1 + dy * (dist - r) / dist
    draw_line(x1, y1, x2, y2)

# Scale factor: 1 unit = 50 pixels
SCALE = 50
def S(x, y):
    return x * SCALE - 250, y * SCALE - 250  # center the drawing

# Draw four propellers (radius = 1 unit scaled)
draw_circle(*S(2.0, 2.0), r=SCALE)
draw_circle(*S(2.0, 8.0), r=SCALE)
draw_circle(*S(8.0, 8.0), r=SCALE)
draw_circle(*S(8.0, 2.0), r=SCALE)

# Draw central diamond (square rotated)
draw_line(*S(3.0, 5.0), *S(5.0, 7.0))
draw_line(*S(5.0, 7.0), *S(7.0, 5.0))
draw_line(*S(7.0, 5.0), *S(5.0, 3.0))
draw_line(*S(5.0, 3.0), *S(3.0, 5.0))

# Connect diamond corners to propellers
draw_line(*S(4.0, 4.0), *S(2.0, 2.0))
draw_line(*S(4.0, 6.0), *S(2.0, 8.0))
draw_line(*S(6.0, 6.0), *S(8.0, 8.0))
draw_line(*S(6.0, 4.0), *S(8.0, 2.0))


# Return to center (5,5)
move_to(*S(5.0, 5.0))

turtle.done()
